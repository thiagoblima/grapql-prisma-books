# import UserOrderByInput, BookOrderByInput, ReviewOrderByInput from './generated/prisma.graphql'

    type Query {
        users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
        books(query: String, first: Int, skip: Int, after: String, orderBy: BookOrderByInput): [Book!]!
        reviews(first: Int, skip: Int, after: String, orderBy: ReviewOrderByInput): [Review!]!
        greeting(name: String, position: String): String!
        order(item: String, qtd: Int, price: Float!): String!
        add(numbers: [Float!]!): Float!
        grades: [Int!]!
        me: User!
    }

    type Mutation {
        login(data: LoginUserInput!): AuthPayload!
        createUser(data: CreateUserInput!): AuthPayload!
        updateUser(data: UpdateUserInput!): User!
        deleteUser: User!
        createBook(data: CreateBookInput!): Book!
    }

    type Subscription {
        count: Int!
        user: CreateUserSubscriptionPayload!
    }

    type AuthPayload {
        token: String!
        user: User!
    }

    input CreateUserInput {
        name: String! 
        email: String!
        password: String!
    }

    input LoginUserInput {
        email: String!
        password: String!
    }

    input UpdateUserInput {
        name: String
        email: String
        password: String
    }

    input CreateBookInput {
        name: String!
        author: String!
        likes: Int
        rating: Int
        isbn: String!
        published: Boolean!
    }

    type User {
        id: ID!
        name: String!
        email: String
        books: [Book!]!
        reviews: [Review!]!
        createdAt: String!
        updatedAt: String!
    }

    type Book {
        id: ID!
        name: String!
        author: User!
        reviews: [Review!]!
        isbn: String!
        likes: Int!
        published: Boolean!
        rating: Int!
        createdAt: DateTime! 
        updatedAt: DateTime!
    }

    type Review {
        id: ID!
        text: String!
        title: String!
        author: User!
        likes: Int!
        book: Book!
        createdAt: DateTime!
        updatedAt: DateTime!
    }

    enum MutationType {
        CREATED,
        DELETED,
        UPDATED
    }

      type CreateUserSubscriptionPayload {
        mutation: MutationType!
        node: User!
    }
    